pipeline {
    agent any  // This specifies where the job will run (can be a specific agent or any available agent)

    tools {
        // Define the JDK and Maven tools
        jdk 'JDK_21'   // JDK name as defined in Jenkins tool configuration
        maven 'Maven_3.9.9'  // Maven version as defined in Jenkins tool configuration
    }
    stages {
        stage('Checkout Code') {
            steps {
                echo 'Pulling the latest code from the Git repository'
				echo "JAVA_HOME is ${env.JAVA_HOME}"
                echo "MAVEN_HOME is ${env.MAVEN_HOME}"
                git branch: 'master', url: 'https://github.com/akhter05/TechnicalAssignments.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies (e.g., in pom.xml)'
                sh 'mvn clean install -DskipTests -f DeloitteProject/pom.xml -X'  
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests using the grouping.xml file'
                sh 'mvn clean test -DsuiteXmlFile=DeloitteProject/grouping'
            }
        }
		
        }

    post {
        always {
		 echo "The value of project build directory is: ${env.WORKSPACE}"
            script {
              	// Define the directory path
				    def workspacePath = env.WORKSPACE
					def correctedPath = workspacePath.replace('\\', '/')
                    def reportDir = "${correctedPath}/DeloitteProject/reports"
					
                    echo "Report folder is : ${reportDir}"
					
                    // Find the latest report file based on modification time (using sh step for shell commands)
            def latestReport = sh(script: """
                cd ${reportDir}
                ls -t | head -n 1
            """, returnStdout: true).trim()
					
                  
                    // Set the latest report's file path
                    def reportPath = "${reportDir}/${latestReport}"

                    // Print the latest report file for debugging purposes
                    echo "Latest report path is : ${reportPath}"

                    // Set the environment variable for the report
                    env.REPORT_PATH = reportPath

                // Publish extent report
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: reportDir,
                    reportFiles: latestReport,
                    reportName: 'Extent Report'
                ])
            }
        }
   	

        success {
            echo 'Tests passed!'
        }

        failure {
            echo 'Tests failed!'
        }
		
		unstable {
    echo 'Pipeline is marked as unstable!'
        }

    }
	}