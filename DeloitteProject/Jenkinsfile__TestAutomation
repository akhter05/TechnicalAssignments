pipeline {
    agent any  // This specifies where the job will run (can be a specific agent or any available agent)

    tools {
        // Define the JDK and Maven tools
        jdk 'JDK_21'   // JDK name as defined in Jenkins tool configuration
        maven 'Maven_3.9.9'  // Maven version as defined in Jenkins tool configuration
    }
    stages {
        stage('Checkout Code') {
            steps {
                echo 'Pulling the latest code from the Git repository'
				echo "JAVA_HOME is ${env.JAVA_HOME}"
                echo "MAVEN_HOME is ${env.MAVEN_HOME}"
                git branch: 'master', url: 'https://github.com/akhter05/TechnicalAssignments.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies (e.g., in pom.xml)'
                sh 'mvn clean install -DskipTests -f DeloitteProject/pom.xml -X'  
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests using the grouping.xml file'
                sh 'mvn clean test -DsuiteXmlFile=DeloitteProject/grouping'
            }
        }
		
        }

    post {
        always {
		script { 
		def reportName = System.getProperty("EXTENT_REPORT_NAME", "") 
		def reportPath = System.getProperty("EXTENT_REPORT_PATH", "") 
		if (reportName && reportPath) 
		{ env.EXTENT_REPORT_NAME = reportName
		env.EXTENT_REPORT_PATH = reportPath 
		echo "EXTENT_REPORT_NAME is ${env.EXTENT_REPORT_NAME}" 
		echo "EXTENT_REPORT_PATH is ${env.EXTENT_REPORT_PATH}" } 
		else { error "EXTENT_REPORT_NAME or EXTENT_REPORT_PATH is not set." } // Ensure report path is properly formatted for the publishHTML step def reportDir = "${env.WORKSPACE}/DeloitteProject/reports"
		def reportFile = reportPath.replace("\\", "/").split('/').last() // Publish extent report 
		publishHTML(target: [ 
		allowMissing: false,
		alwaysLinkToLastBuild: true, 
		keepAll: true, 
		reportDir: reportDir, 
		reportFiles: reportFile, 
		reportName: 'Extent Report', 
		reportTitles: '', 
		useWrapperFileDirectly: true 
		])		
        }

        success {
            echo 'Tests passed!'
        }

        failure {
            echo 'Tests failed!'
        }
		
		unstable {
    echo 'Pipeline is marked as unstable!'
        }

	}
	}
	}